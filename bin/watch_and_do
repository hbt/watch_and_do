#!/usr/bin/env ruby

require 'optparse'

# options + arguments + usage/examples section
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: watch_and_do directory_name extension1,extension2 scriptName \n
Example:  watch_and_do /tmp/ss js,coffee,rb /tmp/do.rb
Example:  watch_and_do . coffee ./rebuild.sh
  "

  opts.on( '-v', '--version', 'Displays this screen' ) do
    puts eval(File.new("./../watch_and_do.gemspec", "r").read).version
    exit
  end

  opts.on( '-h', '--help', 'Displays this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

# returns full path in case relatives paths are passed
def get_full_path(path)
  if path == '.'
    path = Dir.pwd
  elsif !File::exists? path
    Dir.pwd + File::SEPARATOR + path
  end

  return path
end

if ARGV.size == 3
  valid = true

  dir = File.new get_full_path(ARGV[0])
  extensions = ARGV[1].split(',')
  script = File.new get_full_path(ARGV[2])

  # validation (path + script exist)
  if !File::exists? dir
    valid = false
    puts "invalid directory name"
  end

  script_path = File.expand_path script
  dir_path = File.expand_path dir

  if valid
    puts "\nNow watching #{dir_path} and executing #{script_path}"
    # start watch + call script on modified file
    while true do
      line = %x[inotifywait -e modify -q -r #{dir_path}]

      words = line.split(' MODIFY ')

      filename = words[0] + words[1]
      filename.strip!

      extensions.each do |ext|
        if filename.end_with? ext
          puts "#{script_path} #{filename}"
          puts %x[#{script_path} #{filename} &]
          break
        end
      end

    end
  end

else
  puts "invalid number of arguments"
end



